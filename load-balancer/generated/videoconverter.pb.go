// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: videoconverter.proto

package videoconverter

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UploadStatusCode int32

const (
	UploadStatusCode_Unknown     UploadStatusCode = 0
	UploadStatusCode_Ok          UploadStatusCode = 1
	UploadStatusCode_Interrupted UploadStatusCode = 2
)

// Enum value maps for UploadStatusCode.
var (
	UploadStatusCode_name = map[int32]string{
		0: "Unknown",
		1: "Ok",
		2: "Interrupted",
	}
	UploadStatusCode_value = map[string]int32{
		"Unknown":     0,
		"Ok":          1,
		"Interrupted": 2,
	}
)

func (x UploadStatusCode) Enum() *UploadStatusCode {
	p := new(UploadStatusCode)
	*p = x
	return p
}

func (x UploadStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_videoconverter_proto_enumTypes[0].Descriptor()
}

func (UploadStatusCode) Type() protoreflect.EnumType {
	return &file_videoconverter_proto_enumTypes[0]
}

func (x UploadStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadStatusCode.Descriptor instead.
func (UploadStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{0}
}

type ConversionStatusCode int32

const (
	ConversionStatusCode_InProgress ConversionStatusCode = 0
	ConversionStatusCode_Done       ConversionStatusCode = 1
	ConversionStatusCode_Failed     ConversionStatusCode = 2
	ConversionStatusCode_NotStarted ConversionStatusCode = 3
)

// Enum value maps for ConversionStatusCode.
var (
	ConversionStatusCode_name = map[int32]string{
		0: "InProgress",
		1: "Done",
		2: "Failed",
		3: "NotStarted",
	}
	ConversionStatusCode_value = map[string]int32{
		"InProgress": 0,
		"Done":       1,
		"Failed":     2,
		"NotStarted": 3,
	}
)

func (x ConversionStatusCode) Enum() *ConversionStatusCode {
	p := new(ConversionStatusCode)
	*p = x
	return p
}

func (x ConversionStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversionStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_videoconverter_proto_enumTypes[1].Descriptor()
}

func (ConversionStatusCode) Type() protoreflect.EnumType {
	return &file_videoconverter_proto_enumTypes[1]
}

func (x ConversionStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversionStatusCode.Descriptor instead.
func (ConversionStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{1}
}

type RecreateRingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialSenderId int32 `protobuf:"varint,1,opt,name=InitialSenderId,proto3" json:"InitialSenderId,omitempty"`
}

func (x *RecreateRingRequest) Reset() {
	*x = RecreateRingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecreateRingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecreateRingRequest) ProtoMessage() {}

func (x *RecreateRingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecreateRingRequest.ProtoReflect.Descriptor instead.
func (*RecreateRingRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{0}
}

func (x *RecreateRingRequest) GetInitialSenderId() int32 {
	if x != nil {
		return x.InitialSenderId
	}
	return 0
}

type RecreateRingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecreateRingResponse) Reset() {
	*x = RecreateRingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecreateRingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecreateRingResponse) ProtoMessage() {}

func (x *RecreateRingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecreateRingResponse.ProtoReflect.Descriptor instead.
func (*RecreateRingResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{1}
}

type ElectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighestProcessNumber int32 `protobuf:"varint,1,opt,name=highestProcessNumber,proto3" json:"highestProcessNumber,omitempty"`
}

func (x *ElectionRequest) Reset() {
	*x = ElectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionRequest) ProtoMessage() {}

func (x *ElectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionRequest.ProtoReflect.Descriptor instead.
func (*ElectionRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{2}
}

func (x *ElectionRequest) GetHighestProcessNumber() int32 {
	if x != nil {
		return x.HighestProcessNumber
	}
	return 0
}

type ElectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ElectionResponse) Reset() {
	*x = ElectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionResponse) ProtoMessage() {}

func (x *ElectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionResponse.ProtoReflect.Descriptor instead.
func (*ElectionResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{3}
}

type CoordinatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighestProcessNumber int32 `protobuf:"varint,1,opt,name=highestProcessNumber,proto3" json:"highestProcessNumber,omitempty"`
}

func (x *CoordinatorRequest) Reset() {
	*x = CoordinatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinatorRequest) ProtoMessage() {}

func (x *CoordinatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinatorRequest.ProtoReflect.Descriptor instead.
func (*CoordinatorRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{4}
}

func (x *CoordinatorRequest) GetHighestProcessNumber() int32 {
	if x != nil {
		return x.HighestProcessNumber
	}
	return 0
}

type CoordinatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CoordinatorResponse) Reset() {
	*x = CoordinatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinatorResponse) ProtoMessage() {}

func (x *CoordinatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinatorResponse.ProtoReflect.Descriptor instead.
func (*CoordinatorResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{5}
}

type IsAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsAliveRequest) Reset() {
	*x = IsAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAliveRequest) ProtoMessage() {}

func (x *IsAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAliveRequest.ProtoReflect.Descriptor instead.
func (*IsAliveRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{6}
}

type IsAliveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsAliveResponse) Reset() {
	*x = IsAliveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAliveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAliveResponse) ProtoMessage() {}

func (x *IsAliveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAliveResponse.ProtoReflect.Descriptor instead.
func (*IsAliveResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{7}
}

type MarkTokenAsCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *MarkTokenAsCompleteRequest) Reset() {
	*x = MarkTokenAsCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTokenAsCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTokenAsCompleteRequest) ProtoMessage() {}

func (x *MarkTokenAsCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTokenAsCompleteRequest.ProtoReflect.Descriptor instead.
func (*MarkTokenAsCompleteRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{8}
}

func (x *MarkTokenAsCompleteRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type MarkTokenAsCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkTokenAsCompleteResponse) Reset() {
	*x = MarkTokenAsCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTokenAsCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTokenAsCompleteResponse) ProtoMessage() {}

func (x *MarkTokenAsCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTokenAsCompleteResponse.ProtoReflect.Descriptor instead.
func (*MarkTokenAsCompleteResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{9}
}

type ShutDownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutDownRequest) Reset() {
	*x = ShutDownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutDownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutDownRequest) ProtoMessage() {}

func (x *ShutDownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutDownRequest.ProtoReflect.Descriptor instead.
func (*ShutDownRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{10}
}

type ShutDownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutDownResponse) Reset() {
	*x = ShutDownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutDownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutDownResponse) ProtoMessage() {}

func (x *ShutDownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutDownResponse.ProtoReflect.Descriptor instead.
func (*ShutDownResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{11}
}

type UploadTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UploadTokenRequest) Reset() {
	*x = UploadTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTokenRequest) ProtoMessage() {}

func (x *UploadTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTokenRequest.ProtoReflect.Descriptor instead.
func (*UploadTokenRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{12}
}

type UploadTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *UploadTokenResponse) Reset() {
	*x = UploadTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTokenResponse) ProtoMessage() {}

func (x *UploadTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTokenResponse.ProtoReflect.Descriptor instead.
func (*UploadTokenResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{13}
}

func (x *UploadTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ConversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	InputType  string `protobuf:"bytes,2,opt,name=InputType,proto3" json:"InputType,omitempty"`
	OutputType string `protobuf:"bytes,3,opt,name=OutputType,proto3" json:"OutputType,omitempty"`
}

func (x *ConversionRequest) Reset() {
	*x = ConversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionRequest) ProtoMessage() {}

func (x *ConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionRequest.ProtoReflect.Descriptor instead.
func (*ConversionRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{14}
}

func (x *ConversionRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConversionRequest) GetInputType() string {
	if x != nil {
		return x.InputType
	}
	return ""
}

func (x *ConversionRequest) GetOutputType() string {
	if x != nil {
		return x.OutputType
	}
	return ""
}

type ConversionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *ConversionResponse) Reset() {
	*x = ConversionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionResponse) ProtoMessage() {}

func (x *ConversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionResponse.ProtoReflect.Descriptor instead.
func (*ConversionResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{15}
}

func (x *ConversionResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestType:
	//	*Chunk_Token
	//	*Chunk_Content
	RequestType isChunk_RequestType `protobuf_oneof:"RequestType"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{16}
}

func (m *Chunk) GetRequestType() isChunk_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *Chunk) GetToken() string {
	if x, ok := x.GetRequestType().(*Chunk_Token); ok {
		return x.Token
	}
	return ""
}

func (x *Chunk) GetContent() []byte {
	if x, ok := x.GetRequestType().(*Chunk_Content); ok {
		return x.Content
	}
	return nil
}

type isChunk_RequestType interface {
	isChunk_RequestType()
}

type Chunk_Token struct {
	Token string `protobuf:"bytes,1,opt,name=Token,proto3,oneof"`
}

type Chunk_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=Content,proto3,oneof"`
}

func (*Chunk_Token) isChunk_RequestType() {}

func (*Chunk_Content) isChunk_RequestType() {}

type ConversionStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       ConversionStatusCode `protobuf:"varint,1,opt,name=Code,proto3,enum=videoconverter.ConversionStatusCode" json:"Code,omitempty"`
	DownloadId string               `protobuf:"bytes,2,opt,name=DownloadId,proto3" json:"DownloadId,omitempty"`
}

func (x *ConversionStatusResponse) Reset() {
	*x = ConversionStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionStatusResponse) ProtoMessage() {}

func (x *ConversionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionStatusResponse.ProtoReflect.Descriptor instead.
func (*ConversionStatusResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{17}
}

func (x *ConversionStatusResponse) GetCode() ConversionStatusCode {
	if x != nil {
		return x.Code
	}
	return ConversionStatusCode_InProgress
}

func (x *ConversionStatusResponse) GetDownloadId() string {
	if x != nil {
		return x.DownloadId
	}
	return ""
}

type ConversionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusId string `protobuf:"bytes,1,opt,name=StatusId,proto3" json:"StatusId,omitempty"`
}

func (x *ConversionStatusRequest) Reset() {
	*x = ConversionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionStatusRequest) ProtoMessage() {}

func (x *ConversionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionStatusRequest.ProtoReflect.Descriptor instead.
func (*ConversionStatusRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{18}
}

func (x *ConversionStatusRequest) GetStatusId() string {
	if x != nil {
		return x.StatusId
	}
	return ""
}

type AvailableForWorkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableForWork bool `protobuf:"varint,1,opt,name=AvailableForWork,proto3" json:"AvailableForWork,omitempty"`
}

func (x *AvailableForWorkResponse) Reset() {
	*x = AvailableForWorkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableForWorkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableForWorkResponse) ProtoMessage() {}

func (x *AvailableForWorkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableForWorkResponse.ProtoReflect.Descriptor instead.
func (*AvailableForWorkResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{19}
}

func (x *AvailableForWorkResponse) GetAvailableForWork() bool {
	if x != nil {
		return x.AvailableForWork
	}
	return false
}

type AvailableForWorkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AvailableForWorkRequest) Reset() {
	*x = AvailableForWorkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableForWorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableForWorkRequest) ProtoMessage() {}

func (x *AvailableForWorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableForWorkRequest.ProtoReflect.Descriptor instead.
func (*AvailableForWorkRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{20}
}

type UploadStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetrievalToken string `protobuf:"bytes,1,opt,name=RetrievalToken,proto3" json:"RetrievalToken,omitempty"`
}

func (x *UploadStatus) Reset() {
	*x = UploadStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadStatus) ProtoMessage() {}

func (x *UploadStatus) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadStatus.ProtoReflect.Descriptor instead.
func (*UploadStatus) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{21}
}

func (x *UploadStatus) GetRetrievalToken() string {
	if x != nil {
		return x.RetrievalToken
	}
	return ""
}

type DownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DownloadRequest) Reset() {
	*x = DownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadRequest) ProtoMessage() {}

func (x *DownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadRequest.ProtoReflect.Descriptor instead.
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{22}
}

func (x *DownloadRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code UploadStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=videoconverter.UploadStatusCode" json:"code,omitempty"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteResponse) GetCode() UploadStatusCode {
	if x != nil {
		return x.Code
	}
	return UploadStatusCode_Unknown
}

type DownloadStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string           `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code    UploadStatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=videoconverter.UploadStatusCode" json:"Code,omitempty"`
}

func (x *DownloadStatus) Reset() {
	*x = DownloadStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadStatus) ProtoMessage() {}

func (x *DownloadStatus) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadStatus.ProtoReflect.Descriptor instead.
func (*DownloadStatus) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{25}
}

func (x *DownloadStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DownloadStatus) GetCode() UploadStatusCode {
	if x != nil {
		return x.Code
	}
	return UploadStatusCode_Unknown
}

var File_videoconverter_proto protoreflect.FileDescriptor

var file_videoconverter_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x45, 0x0a, 0x0f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x12, 0x0a, 0x10, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x0a, 0x12, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x14, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x49,
	0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x11, 0x0a,
	0x0f, 0x49, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x32, 0x0a, 0x1a, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x68, 0x75, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x68, 0x75, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x2b, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x67, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2a, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x4a, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x74,
	0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x18, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x57,
	0x6f, 0x72, 0x6b, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x36,
	0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61,
	0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x21, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x60, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x2a, 0x38, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x4c,
	0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x03, 0x32, 0x8a, 0x05, 0x0a,
	0x1a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x12, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x22, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x15, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1c, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x5a, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x1f, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x70, 0x0a, 0x13,
	0x4d, 0x61, 0x72, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xfb, 0x02, 0x0a, 0x15, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x07, 0x49, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x57, 0x6f, 0x72,
	0x6b, 0x12, 0x27, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x57,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x12, 0x1f, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xe1, 0x02, 0x0a, 0x09, 0x4c, 0x69, 0x66, 0x65,
	0x47, 0x75, 0x61, 0x72, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x49, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x12, 0x1e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x22, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b,
	0x0a, 0x0c, 0x52, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_videoconverter_proto_rawDescOnce sync.Once
	file_videoconverter_proto_rawDescData = file_videoconverter_proto_rawDesc
)

func file_videoconverter_proto_rawDescGZIP() []byte {
	file_videoconverter_proto_rawDescOnce.Do(func() {
		file_videoconverter_proto_rawDescData = protoimpl.X.CompressGZIP(file_videoconverter_proto_rawDescData)
	})
	return file_videoconverter_proto_rawDescData
}

var file_videoconverter_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_videoconverter_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_videoconverter_proto_goTypes = []interface{}{
	(UploadStatusCode)(0),               // 0: videoconverter.UploadStatusCode
	(ConversionStatusCode)(0),           // 1: videoconverter.ConversionStatusCode
	(*RecreateRingRequest)(nil),         // 2: videoconverter.RecreateRingRequest
	(*RecreateRingResponse)(nil),        // 3: videoconverter.RecreateRingResponse
	(*ElectionRequest)(nil),             // 4: videoconverter.ElectionRequest
	(*ElectionResponse)(nil),            // 5: videoconverter.ElectionResponse
	(*CoordinatorRequest)(nil),          // 6: videoconverter.CoordinatorRequest
	(*CoordinatorResponse)(nil),         // 7: videoconverter.CoordinatorResponse
	(*IsAliveRequest)(nil),              // 8: videoconverter.IsAliveRequest
	(*IsAliveResponse)(nil),             // 9: videoconverter.IsAliveResponse
	(*MarkTokenAsCompleteRequest)(nil),  // 10: videoconverter.MarkTokenAsCompleteRequest
	(*MarkTokenAsCompleteResponse)(nil), // 11: videoconverter.MarkTokenAsCompleteResponse
	(*ShutDownRequest)(nil),             // 12: videoconverter.ShutDownRequest
	(*ShutDownResponse)(nil),            // 13: videoconverter.ShutDownResponse
	(*UploadTokenRequest)(nil),          // 14: videoconverter.UploadTokenRequest
	(*UploadTokenResponse)(nil),         // 15: videoconverter.UploadTokenResponse
	(*ConversionRequest)(nil),           // 16: videoconverter.ConversionRequest
	(*ConversionResponse)(nil),          // 17: videoconverter.ConversionResponse
	(*Chunk)(nil),                       // 18: videoconverter.Chunk
	(*ConversionStatusResponse)(nil),    // 19: videoconverter.ConversionStatusResponse
	(*ConversionStatusRequest)(nil),     // 20: videoconverter.ConversionStatusRequest
	(*AvailableForWorkResponse)(nil),    // 21: videoconverter.AvailableForWorkResponse
	(*AvailableForWorkRequest)(nil),     // 22: videoconverter.AvailableForWorkRequest
	(*UploadStatus)(nil),                // 23: videoconverter.UploadStatus
	(*DownloadRequest)(nil),             // 24: videoconverter.DownloadRequest
	(*DeleteRequest)(nil),               // 25: videoconverter.DeleteRequest
	(*DeleteResponse)(nil),              // 26: videoconverter.DeleteResponse
	(*DownloadStatus)(nil),              // 27: videoconverter.DownloadStatus
}
var file_videoconverter_proto_depIdxs = []int32{
	1,  // 0: videoconverter.ConversionStatusResponse.Code:type_name -> videoconverter.ConversionStatusCode
	0,  // 1: videoconverter.DeleteResponse.code:type_name -> videoconverter.UploadStatusCode
	0,  // 2: videoconverter.DownloadStatus.Code:type_name -> videoconverter.UploadStatusCode
	14, // 3: videoconverter.VideoConverterLoadBalancer.RequestUploadToken:input_type -> videoconverter.UploadTokenRequest
	18, // 4: videoconverter.VideoConverterLoadBalancer.Upload:input_type -> videoconverter.Chunk
	16, // 5: videoconverter.VideoConverterLoadBalancer.StartConversion:input_type -> videoconverter.ConversionRequest
	20, // 6: videoconverter.VideoConverterLoadBalancer.ConversionStatus:input_type -> videoconverter.ConversionStatusRequest
	24, // 7: videoconverter.VideoConverterLoadBalancer.Download:input_type -> videoconverter.DownloadRequest
	10, // 8: videoconverter.VideoConverterLoadBalancer.MarkTokenAsComplete:input_type -> videoconverter.MarkTokenAsCompleteRequest
	25, // 9: videoconverter.VideoConverterLoadBalancer.Delete:input_type -> videoconverter.DeleteRequest
	16, // 10: videoconverter.VideoConverterService.StartConversion:input_type -> videoconverter.ConversionRequest
	8,  // 11: videoconverter.VideoConverterService.IsAlive:input_type -> videoconverter.IsAliveRequest
	22, // 12: videoconverter.VideoConverterService.AvailableForWork:input_type -> videoconverter.AvailableForWorkRequest
	12, // 13: videoconverter.VideoConverterService.ShutDown:input_type -> videoconverter.ShutDownRequest
	8,  // 14: videoconverter.LifeGuard.IsAlive:input_type -> videoconverter.IsAliveRequest
	4,  // 15: videoconverter.LifeGuard.Election:input_type -> videoconverter.ElectionRequest
	6,  // 16: videoconverter.LifeGuard.Coordinator:input_type -> videoconverter.CoordinatorRequest
	2,  // 17: videoconverter.LifeGuard.RecreateRing:input_type -> videoconverter.RecreateRingRequest
	15, // 18: videoconverter.VideoConverterLoadBalancer.RequestUploadToken:output_type -> videoconverter.UploadTokenResponse
	23, // 19: videoconverter.VideoConverterLoadBalancer.Upload:output_type -> videoconverter.UploadStatus
	17, // 20: videoconverter.VideoConverterLoadBalancer.StartConversion:output_type -> videoconverter.ConversionResponse
	19, // 21: videoconverter.VideoConverterLoadBalancer.ConversionStatus:output_type -> videoconverter.ConversionStatusResponse
	18, // 22: videoconverter.VideoConverterLoadBalancer.Download:output_type -> videoconverter.Chunk
	11, // 23: videoconverter.VideoConverterLoadBalancer.MarkTokenAsComplete:output_type -> videoconverter.MarkTokenAsCompleteResponse
	26, // 24: videoconverter.VideoConverterLoadBalancer.Delete:output_type -> videoconverter.DeleteResponse
	17, // 25: videoconverter.VideoConverterService.StartConversion:output_type -> videoconverter.ConversionResponse
	9,  // 26: videoconverter.VideoConverterService.IsAlive:output_type -> videoconverter.IsAliveResponse
	21, // 27: videoconverter.VideoConverterService.AvailableForWork:output_type -> videoconverter.AvailableForWorkResponse
	13, // 28: videoconverter.VideoConverterService.ShutDown:output_type -> videoconverter.ShutDownResponse
	9,  // 29: videoconverter.LifeGuard.IsAlive:output_type -> videoconverter.IsAliveResponse
	5,  // 30: videoconverter.LifeGuard.Election:output_type -> videoconverter.ElectionResponse
	7,  // 31: videoconverter.LifeGuard.Coordinator:output_type -> videoconverter.CoordinatorResponse
	3,  // 32: videoconverter.LifeGuard.RecreateRing:output_type -> videoconverter.RecreateRingResponse
	18, // [18:33] is the sub-list for method output_type
	3,  // [3:18] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_videoconverter_proto_init() }
func file_videoconverter_proto_init() {
	if File_videoconverter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_videoconverter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecreateRingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecreateRingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAliveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTokenAsCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTokenAsCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutDownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutDownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableForWorkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableForWorkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_videoconverter_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Chunk_Token)(nil),
		(*Chunk_Content)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_videoconverter_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_videoconverter_proto_goTypes,
		DependencyIndexes: file_videoconverter_proto_depIdxs,
		EnumInfos:         file_videoconverter_proto_enumTypes,
		MessageInfos:      file_videoconverter_proto_msgTypes,
	}.Build()
	File_videoconverter_proto = out.File
	file_videoconverter_proto_rawDesc = nil
	file_videoconverter_proto_goTypes = nil
	file_videoconverter_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VideoConverterLoadBalancerClient is the client API for VideoConverterLoadBalancer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VideoConverterLoadBalancerClient interface {
	RequestUploadToken(ctx context.Context, in *UploadTokenRequest, opts ...grpc.CallOption) (*UploadTokenResponse, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (VideoConverterLoadBalancer_UploadClient, error)
	StartConversion(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionResponse, error)
	ConversionStatus(ctx context.Context, in *ConversionStatusRequest, opts ...grpc.CallOption) (*ConversionStatusResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (VideoConverterLoadBalancer_DownloadClient, error)
	MarkTokenAsComplete(ctx context.Context, in *MarkTokenAsCompleteRequest, opts ...grpc.CallOption) (*MarkTokenAsCompleteResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type videoConverterLoadBalancerClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoConverterLoadBalancerClient(cc grpc.ClientConnInterface) VideoConverterLoadBalancerClient {
	return &videoConverterLoadBalancerClient{cc}
}

func (c *videoConverterLoadBalancerClient) RequestUploadToken(ctx context.Context, in *UploadTokenRequest, opts ...grpc.CallOption) (*UploadTokenResponse, error) {
	out := new(UploadTokenResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.VideoConverterLoadBalancer/RequestUploadToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoConverterLoadBalancerClient) Upload(ctx context.Context, opts ...grpc.CallOption) (VideoConverterLoadBalancer_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VideoConverterLoadBalancer_serviceDesc.Streams[0], "/videoconverter.VideoConverterLoadBalancer/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoConverterLoadBalancerUploadClient{stream}
	return x, nil
}

type VideoConverterLoadBalancer_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type videoConverterLoadBalancerUploadClient struct {
	grpc.ClientStream
}

func (x *videoConverterLoadBalancerUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoConverterLoadBalancerUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoConverterLoadBalancerClient) StartConversion(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionResponse, error) {
	out := new(ConversionResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.VideoConverterLoadBalancer/StartConversion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoConverterLoadBalancerClient) ConversionStatus(ctx context.Context, in *ConversionStatusRequest, opts ...grpc.CallOption) (*ConversionStatusResponse, error) {
	out := new(ConversionStatusResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.VideoConverterLoadBalancer/ConversionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoConverterLoadBalancerClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (VideoConverterLoadBalancer_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VideoConverterLoadBalancer_serviceDesc.Streams[1], "/videoconverter.VideoConverterLoadBalancer/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoConverterLoadBalancerDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VideoConverterLoadBalancer_DownloadClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type videoConverterLoadBalancerDownloadClient struct {
	grpc.ClientStream
}

func (x *videoConverterLoadBalancerDownloadClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoConverterLoadBalancerClient) MarkTokenAsComplete(ctx context.Context, in *MarkTokenAsCompleteRequest, opts ...grpc.CallOption) (*MarkTokenAsCompleteResponse, error) {
	out := new(MarkTokenAsCompleteResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.VideoConverterLoadBalancer/MarkTokenAsComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoConverterLoadBalancerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.VideoConverterLoadBalancer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoConverterLoadBalancerServer is the server API for VideoConverterLoadBalancer service.
type VideoConverterLoadBalancerServer interface {
	RequestUploadToken(context.Context, *UploadTokenRequest) (*UploadTokenResponse, error)
	Upload(VideoConverterLoadBalancer_UploadServer) error
	StartConversion(context.Context, *ConversionRequest) (*ConversionResponse, error)
	ConversionStatus(context.Context, *ConversionStatusRequest) (*ConversionStatusResponse, error)
	Download(*DownloadRequest, VideoConverterLoadBalancer_DownloadServer) error
	MarkTokenAsComplete(context.Context, *MarkTokenAsCompleteRequest) (*MarkTokenAsCompleteResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

// UnimplementedVideoConverterLoadBalancerServer can be embedded to have forward compatible implementations.
type UnimplementedVideoConverterLoadBalancerServer struct {
}

func (*UnimplementedVideoConverterLoadBalancerServer) RequestUploadToken(context.Context, *UploadTokenRequest) (*UploadTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestUploadToken not implemented")
}
func (*UnimplementedVideoConverterLoadBalancerServer) Upload(VideoConverterLoadBalancer_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedVideoConverterLoadBalancerServer) StartConversion(context.Context, *ConversionRequest) (*ConversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConversion not implemented")
}
func (*UnimplementedVideoConverterLoadBalancerServer) ConversionStatus(context.Context, *ConversionStatusRequest) (*ConversionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversionStatus not implemented")
}
func (*UnimplementedVideoConverterLoadBalancerServer) Download(*DownloadRequest, VideoConverterLoadBalancer_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (*UnimplementedVideoConverterLoadBalancerServer) MarkTokenAsComplete(context.Context, *MarkTokenAsCompleteRequest) (*MarkTokenAsCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTokenAsComplete not implemented")
}
func (*UnimplementedVideoConverterLoadBalancerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterVideoConverterLoadBalancerServer(s *grpc.Server, srv VideoConverterLoadBalancerServer) {
	s.RegisterService(&_VideoConverterLoadBalancer_serviceDesc, srv)
}

func _VideoConverterLoadBalancer_RequestUploadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoConverterLoadBalancerServer).RequestUploadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.VideoConverterLoadBalancer/RequestUploadToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoConverterLoadBalancerServer).RequestUploadToken(ctx, req.(*UploadTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoConverterLoadBalancer_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoConverterLoadBalancerServer).Upload(&videoConverterLoadBalancerUploadServer{stream})
}

type VideoConverterLoadBalancer_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type videoConverterLoadBalancerUploadServer struct {
	grpc.ServerStream
}

func (x *videoConverterLoadBalancerUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoConverterLoadBalancerUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VideoConverterLoadBalancer_StartConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoConverterLoadBalancerServer).StartConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.VideoConverterLoadBalancer/StartConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoConverterLoadBalancerServer).StartConversion(ctx, req.(*ConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoConverterLoadBalancer_ConversionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoConverterLoadBalancerServer).ConversionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.VideoConverterLoadBalancer/ConversionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoConverterLoadBalancerServer).ConversionStatus(ctx, req.(*ConversionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoConverterLoadBalancer_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoConverterLoadBalancerServer).Download(m, &videoConverterLoadBalancerDownloadServer{stream})
}

type VideoConverterLoadBalancer_DownloadServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type videoConverterLoadBalancerDownloadServer struct {
	grpc.ServerStream
}

func (x *videoConverterLoadBalancerDownloadServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _VideoConverterLoadBalancer_MarkTokenAsComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkTokenAsCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoConverterLoadBalancerServer).MarkTokenAsComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.VideoConverterLoadBalancer/MarkTokenAsComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoConverterLoadBalancerServer).MarkTokenAsComplete(ctx, req.(*MarkTokenAsCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoConverterLoadBalancer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoConverterLoadBalancerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.VideoConverterLoadBalancer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoConverterLoadBalancerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VideoConverterLoadBalancer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "videoconverter.VideoConverterLoadBalancer",
	HandlerType: (*VideoConverterLoadBalancerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestUploadToken",
			Handler:    _VideoConverterLoadBalancer_RequestUploadToken_Handler,
		},
		{
			MethodName: "StartConversion",
			Handler:    _VideoConverterLoadBalancer_StartConversion_Handler,
		},
		{
			MethodName: "ConversionStatus",
			Handler:    _VideoConverterLoadBalancer_ConversionStatus_Handler,
		},
		{
			MethodName: "MarkTokenAsComplete",
			Handler:    _VideoConverterLoadBalancer_MarkTokenAsComplete_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VideoConverterLoadBalancer_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _VideoConverterLoadBalancer_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _VideoConverterLoadBalancer_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "videoconverter.proto",
}

// VideoConverterServiceClient is the client API for VideoConverterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VideoConverterServiceClient interface {
	StartConversion(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionResponse, error)
	IsAlive(ctx context.Context, in *IsAliveRequest, opts ...grpc.CallOption) (*IsAliveResponse, error)
	AvailableForWork(ctx context.Context, in *AvailableForWorkRequest, opts ...grpc.CallOption) (*AvailableForWorkResponse, error)
	ShutDown(ctx context.Context, in *ShutDownRequest, opts ...grpc.CallOption) (*ShutDownResponse, error)
}

type videoConverterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoConverterServiceClient(cc grpc.ClientConnInterface) VideoConverterServiceClient {
	return &videoConverterServiceClient{cc}
}

func (c *videoConverterServiceClient) StartConversion(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionResponse, error) {
	out := new(ConversionResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.VideoConverterService/StartConversion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoConverterServiceClient) IsAlive(ctx context.Context, in *IsAliveRequest, opts ...grpc.CallOption) (*IsAliveResponse, error) {
	out := new(IsAliveResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.VideoConverterService/IsAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoConverterServiceClient) AvailableForWork(ctx context.Context, in *AvailableForWorkRequest, opts ...grpc.CallOption) (*AvailableForWorkResponse, error) {
	out := new(AvailableForWorkResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.VideoConverterService/AvailableForWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoConverterServiceClient) ShutDown(ctx context.Context, in *ShutDownRequest, opts ...grpc.CallOption) (*ShutDownResponse, error) {
	out := new(ShutDownResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.VideoConverterService/ShutDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoConverterServiceServer is the server API for VideoConverterService service.
type VideoConverterServiceServer interface {
	StartConversion(context.Context, *ConversionRequest) (*ConversionResponse, error)
	IsAlive(context.Context, *IsAliveRequest) (*IsAliveResponse, error)
	AvailableForWork(context.Context, *AvailableForWorkRequest) (*AvailableForWorkResponse, error)
	ShutDown(context.Context, *ShutDownRequest) (*ShutDownResponse, error)
}

// UnimplementedVideoConverterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVideoConverterServiceServer struct {
}

func (*UnimplementedVideoConverterServiceServer) StartConversion(context.Context, *ConversionRequest) (*ConversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConversion not implemented")
}
func (*UnimplementedVideoConverterServiceServer) IsAlive(context.Context, *IsAliveRequest) (*IsAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAlive not implemented")
}
func (*UnimplementedVideoConverterServiceServer) AvailableForWork(context.Context, *AvailableForWorkRequest) (*AvailableForWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableForWork not implemented")
}
func (*UnimplementedVideoConverterServiceServer) ShutDown(context.Context, *ShutDownRequest) (*ShutDownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutDown not implemented")
}

func RegisterVideoConverterServiceServer(s *grpc.Server, srv VideoConverterServiceServer) {
	s.RegisterService(&_VideoConverterService_serviceDesc, srv)
}

func _VideoConverterService_StartConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoConverterServiceServer).StartConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.VideoConverterService/StartConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoConverterServiceServer).StartConversion(ctx, req.(*ConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoConverterService_IsAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoConverterServiceServer).IsAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.VideoConverterService/IsAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoConverterServiceServer).IsAlive(ctx, req.(*IsAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoConverterService_AvailableForWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableForWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoConverterServiceServer).AvailableForWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.VideoConverterService/AvailableForWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoConverterServiceServer).AvailableForWork(ctx, req.(*AvailableForWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoConverterService_ShutDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoConverterServiceServer).ShutDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.VideoConverterService/ShutDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoConverterServiceServer).ShutDown(ctx, req.(*ShutDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VideoConverterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "videoconverter.VideoConverterService",
	HandlerType: (*VideoConverterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartConversion",
			Handler:    _VideoConverterService_StartConversion_Handler,
		},
		{
			MethodName: "IsAlive",
			Handler:    _VideoConverterService_IsAlive_Handler,
		},
		{
			MethodName: "AvailableForWork",
			Handler:    _VideoConverterService_AvailableForWork_Handler,
		},
		{
			MethodName: "ShutDown",
			Handler:    _VideoConverterService_ShutDown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "videoconverter.proto",
}

// LifeGuardClient is the client API for LifeGuard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LifeGuardClient interface {
	IsAlive(ctx context.Context, in *IsAliveRequest, opts ...grpc.CallOption) (*IsAliveResponse, error)
	Election(ctx context.Context, in *ElectionRequest, opts ...grpc.CallOption) (*ElectionResponse, error)
	Coordinator(ctx context.Context, in *CoordinatorRequest, opts ...grpc.CallOption) (*CoordinatorResponse, error)
	RecreateRing(ctx context.Context, in *RecreateRingRequest, opts ...grpc.CallOption) (*RecreateRingResponse, error)
}

type lifeGuardClient struct {
	cc grpc.ClientConnInterface
}

func NewLifeGuardClient(cc grpc.ClientConnInterface) LifeGuardClient {
	return &lifeGuardClient{cc}
}

func (c *lifeGuardClient) IsAlive(ctx context.Context, in *IsAliveRequest, opts ...grpc.CallOption) (*IsAliveResponse, error) {
	out := new(IsAliveResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.LifeGuard/IsAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifeGuardClient) Election(ctx context.Context, in *ElectionRequest, opts ...grpc.CallOption) (*ElectionResponse, error) {
	out := new(ElectionResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.LifeGuard/Election", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifeGuardClient) Coordinator(ctx context.Context, in *CoordinatorRequest, opts ...grpc.CallOption) (*CoordinatorResponse, error) {
	out := new(CoordinatorResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.LifeGuard/Coordinator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifeGuardClient) RecreateRing(ctx context.Context, in *RecreateRingRequest, opts ...grpc.CallOption) (*RecreateRingResponse, error) {
	out := new(RecreateRingResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.LifeGuard/RecreateRing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LifeGuardServer is the server API for LifeGuard service.
type LifeGuardServer interface {
	IsAlive(context.Context, *IsAliveRequest) (*IsAliveResponse, error)
	Election(context.Context, *ElectionRequest) (*ElectionResponse, error)
	Coordinator(context.Context, *CoordinatorRequest) (*CoordinatorResponse, error)
	RecreateRing(context.Context, *RecreateRingRequest) (*RecreateRingResponse, error)
}

// UnimplementedLifeGuardServer can be embedded to have forward compatible implementations.
type UnimplementedLifeGuardServer struct {
}

func (*UnimplementedLifeGuardServer) IsAlive(context.Context, *IsAliveRequest) (*IsAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAlive not implemented")
}
func (*UnimplementedLifeGuardServer) Election(context.Context, *ElectionRequest) (*ElectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Election not implemented")
}
func (*UnimplementedLifeGuardServer) Coordinator(context.Context, *CoordinatorRequest) (*CoordinatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Coordinator not implemented")
}
func (*UnimplementedLifeGuardServer) RecreateRing(context.Context, *RecreateRingRequest) (*RecreateRingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecreateRing not implemented")
}

func RegisterLifeGuardServer(s *grpc.Server, srv LifeGuardServer) {
	s.RegisterService(&_LifeGuard_serviceDesc, srv)
}

func _LifeGuard_IsAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeGuardServer).IsAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.LifeGuard/IsAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeGuardServer).IsAlive(ctx, req.(*IsAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifeGuard_Election_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeGuardServer).Election(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.LifeGuard/Election",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeGuardServer).Election(ctx, req.(*ElectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifeGuard_Coordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeGuardServer).Coordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.LifeGuard/Coordinator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeGuardServer).Coordinator(ctx, req.(*CoordinatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifeGuard_RecreateRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecreateRingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeGuardServer).RecreateRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.LifeGuard/RecreateRing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeGuardServer).RecreateRing(ctx, req.(*RecreateRingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LifeGuard_serviceDesc = grpc.ServiceDesc{
	ServiceName: "videoconverter.LifeGuard",
	HandlerType: (*LifeGuardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAlive",
			Handler:    _LifeGuard_IsAlive_Handler,
		},
		{
			MethodName: "Election",
			Handler:    _LifeGuard_Election_Handler,
		},
		{
			MethodName: "Coordinator",
			Handler:    _LifeGuard_Coordinator_Handler,
		},
		{
			MethodName: "RecreateRing",
			Handler:    _LifeGuard_RecreateRing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "videoconverter.proto",
}
