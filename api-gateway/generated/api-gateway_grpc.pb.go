// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api_gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// APIGateWayClient is the client API for APIGateWay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIGateWayClient interface {
	AddServiceEndpoint(ctx context.Context, in *ServiceEndPoint, opts ...grpc.CallOption) (*AddedServiceEndPoint, error)
	DisableServiceEndpoint(ctx context.Context, in *DisableServiceEndPoint, opts ...grpc.CallOption) (*DisabledServiceEndPoint, error)
	GetActiveServiceEndpoints(ctx context.Context, in *ServiceEndPointsRequest, opts ...grpc.CallOption) (*ServiceEndPointList, error)
}

type aPIGateWayClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIGateWayClient(cc grpc.ClientConnInterface) APIGateWayClient {
	return &aPIGateWayClient{cc}
}

func (c *aPIGateWayClient) AddServiceEndpoint(ctx context.Context, in *ServiceEndPoint, opts ...grpc.CallOption) (*AddedServiceEndPoint, error) {
	out := new(AddedServiceEndPoint)
	err := c.cc.Invoke(ctx, "/api_gateway.APIGateWay/AddServiceEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGateWayClient) DisableServiceEndpoint(ctx context.Context, in *DisableServiceEndPoint, opts ...grpc.CallOption) (*DisabledServiceEndPoint, error) {
	out := new(DisabledServiceEndPoint)
	err := c.cc.Invoke(ctx, "/api_gateway.APIGateWay/DisableServiceEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGateWayClient) GetActiveServiceEndpoints(ctx context.Context, in *ServiceEndPointsRequest, opts ...grpc.CallOption) (*ServiceEndPointList, error) {
	out := new(ServiceEndPointList)
	err := c.cc.Invoke(ctx, "/api_gateway.APIGateWay/GetActiveServiceEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIGateWayServer is the server API for APIGateWay service.
// All implementations must embed UnimplementedAPIGateWayServer
// for forward compatibility
type APIGateWayServer interface {
	AddServiceEndpoint(context.Context, *ServiceEndPoint) (*AddedServiceEndPoint, error)
	DisableServiceEndpoint(context.Context, *DisableServiceEndPoint) (*DisabledServiceEndPoint, error)
	GetActiveServiceEndpoints(context.Context, *ServiceEndPointsRequest) (*ServiceEndPointList, error)
	mustEmbedUnimplementedAPIGateWayServer()
}

// UnimplementedAPIGateWayServer must be embedded to have forward compatible implementations.
type UnimplementedAPIGateWayServer struct {
}

func (UnimplementedAPIGateWayServer) AddServiceEndpoint(context.Context, *ServiceEndPoint) (*AddedServiceEndPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServiceEndpoint not implemented")
}
func (UnimplementedAPIGateWayServer) DisableServiceEndpoint(context.Context, *DisableServiceEndPoint) (*DisabledServiceEndPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableServiceEndpoint not implemented")
}
func (UnimplementedAPIGateWayServer) GetActiveServiceEndpoints(context.Context, *ServiceEndPointsRequest) (*ServiceEndPointList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveServiceEndpoints not implemented")
}
func (UnimplementedAPIGateWayServer) mustEmbedUnimplementedAPIGateWayServer() {}

// UnsafeAPIGateWayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIGateWayServer will
// result in compilation errors.
type UnsafeAPIGateWayServer interface {
	mustEmbedUnimplementedAPIGateWayServer()
}

func RegisterAPIGateWayServer(s grpc.ServiceRegistrar, srv APIGateWayServer) {
	s.RegisterService(&_APIGateWay_serviceDesc, srv)
}

func _APIGateWay_AddServiceEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceEndPoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGateWayServer).AddServiceEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_gateway.APIGateWay/AddServiceEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGateWayServer).AddServiceEndpoint(ctx, req.(*ServiceEndPoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGateWay_DisableServiceEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableServiceEndPoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGateWayServer).DisableServiceEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_gateway.APIGateWay/DisableServiceEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGateWayServer).DisableServiceEndpoint(ctx, req.(*DisableServiceEndPoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGateWay_GetActiveServiceEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceEndPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGateWayServer).GetActiveServiceEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_gateway.APIGateWay/GetActiveServiceEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGateWayServer).GetActiveServiceEndpoints(ctx, req.(*ServiceEndPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _APIGateWay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api_gateway.APIGateWay",
	HandlerType: (*APIGateWayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddServiceEndpoint",
			Handler:    _APIGateWay_AddServiceEndpoint_Handler,
		},
		{
			MethodName: "DisableServiceEndpoint",
			Handler:    _APIGateWay_DisableServiceEndpoint_Handler,
		},
		{
			MethodName: "GetActiveServiceEndpoints",
			Handler:    _APIGateWay_GetActiveServiceEndpoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api-gateway.proto",
}
