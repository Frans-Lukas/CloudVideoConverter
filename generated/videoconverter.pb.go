// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: videoconverter.proto

package videoconverter

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UploadStatusCode int32

const (
	UploadStatusCode_Unknown     UploadStatusCode = 0
	UploadStatusCode_Ok          UploadStatusCode = 1
	UploadStatusCode_Interrupted UploadStatusCode = 2
)

// Enum value maps for UploadStatusCode.
var (
	UploadStatusCode_name = map[int32]string{
		0: "Unknown",
		1: "Ok",
		2: "Interrupted",
	}
	UploadStatusCode_value = map[string]int32{
		"Unknown":     0,
		"Ok":          1,
		"Interrupted": 2,
	}
)

func (x UploadStatusCode) Enum() *UploadStatusCode {
	p := new(UploadStatusCode)
	*p = x
	return p
}

func (x UploadStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_videoconverter_proto_enumTypes[0].Descriptor()
}

func (UploadStatusCode) Type() protoreflect.EnumType {
	return &file_videoconverter_proto_enumTypes[0]
}

func (x UploadStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadStatusCode.Descriptor instead.
func (UploadStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{0}
}

type ConversionStatusCode int32

const (
	ConversionStatusCode_InProgress ConversionStatusCode = 0
	ConversionStatusCode_Done       ConversionStatusCode = 1
	ConversionStatusCode_Failed     ConversionStatusCode = 2
)

// Enum value maps for ConversionStatusCode.
var (
	ConversionStatusCode_name = map[int32]string{
		0: "InProgress",
		1: "Done",
		2: "Failed",
	}
	ConversionStatusCode_value = map[string]int32{
		"InProgress": 0,
		"Done":       1,
		"Failed":     2,
	}
)

func (x ConversionStatusCode) Enum() *ConversionStatusCode {
	p := new(ConversionStatusCode)
	*p = x
	return p
}

func (x ConversionStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversionStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_videoconverter_proto_enumTypes[1].Descriptor()
}

func (ConversionStatusCode) Type() protoreflect.EnumType {
	return &file_videoconverter_proto_enumTypes[1]
}

func (x ConversionStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversionStatusCode.Descriptor instead.
func (ConversionStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{1}
}

type UploadTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UploadTokenRequest) Reset() {
	*x = UploadTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTokenRequest) ProtoMessage() {}

func (x *UploadTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTokenRequest.ProtoReflect.Descriptor instead.
func (*UploadTokenRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{0}
}

type UploadTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *UploadTokenResponse) Reset() {
	*x = UploadTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTokenResponse) ProtoMessage() {}

func (x *UploadTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTokenResponse.ProtoReflect.Descriptor instead.
func (*UploadTokenResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{1}
}

func (x *UploadTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestType:
	//	*Chunk_Token
	//	*Chunk_Content
	RequestType isChunk_RequestType `protobuf_oneof:"RequestType"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{2}
}

func (m *Chunk) GetRequestType() isChunk_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *Chunk) GetToken() string {
	if x, ok := x.GetRequestType().(*Chunk_Token); ok {
		return x.Token
	}
	return ""
}

func (x *Chunk) GetContent() []byte {
	if x, ok := x.GetRequestType().(*Chunk_Content); ok {
		return x.Content
	}
	return nil
}

type isChunk_RequestType interface {
	isChunk_RequestType()
}

type Chunk_Token struct {
	Token string `protobuf:"bytes,1,opt,name=Token,proto3,oneof"`
}

type Chunk_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=Content,proto3,oneof"`
}

func (*Chunk_Token) isChunk_RequestType() {}

func (*Chunk_Content) isChunk_RequestType() {}

type ConversionStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       ConversionStatusCode `protobuf:"varint,1,opt,name=Code,proto3,enum=videoconverter.ConversionStatusCode" json:"Code,omitempty"`
	DownloadId string               `protobuf:"bytes,2,opt,name=DownloadId,proto3" json:"DownloadId,omitempty"`
}

func (x *ConversionStatusResponse) Reset() {
	*x = ConversionStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionStatusResponse) ProtoMessage() {}

func (x *ConversionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionStatusResponse.ProtoReflect.Descriptor instead.
func (*ConversionStatusResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{3}
}

func (x *ConversionStatusResponse) GetCode() ConversionStatusCode {
	if x != nil {
		return x.Code
	}
	return ConversionStatusCode_InProgress
}

func (x *ConversionStatusResponse) GetDownloadId() string {
	if x != nil {
		return x.DownloadId
	}
	return ""
}

type ConversionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusId string `protobuf:"bytes,1,opt,name=StatusId,proto3" json:"StatusId,omitempty"`
}

func (x *ConversionStatusRequest) Reset() {
	*x = ConversionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionStatusRequest) ProtoMessage() {}

func (x *ConversionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionStatusRequest.ProtoReflect.Descriptor instead.
func (*ConversionStatusRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{4}
}

func (x *ConversionStatusRequest) GetStatusId() string {
	if x != nil {
		return x.StatusId
	}
	return ""
}

type UploadStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetrievalToken string `protobuf:"bytes,1,opt,name=RetrievalToken,proto3" json:"RetrievalToken,omitempty"`
}

func (x *UploadStatus) Reset() {
	*x = UploadStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadStatus) ProtoMessage() {}

func (x *UploadStatus) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadStatus.ProtoReflect.Descriptor instead.
func (*UploadStatus) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{5}
}

func (x *UploadStatus) GetRetrievalToken() string {
	if x != nil {
		return x.RetrievalToken
	}
	return ""
}

type DownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DownloadRequest) Reset() {
	*x = DownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadRequest) ProtoMessage() {}

func (x *DownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadRequest.ProtoReflect.Descriptor instead.
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{6}
}

func (x *DownloadRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code UploadStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=videoconverter.UploadStatusCode" json:"code,omitempty"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteResponse) GetCode() UploadStatusCode {
	if x != nil {
		return x.Code
	}
	return UploadStatusCode_Unknown
}

type DownloadStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string           `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code    UploadStatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=videoconverter.UploadStatusCode" json:"Code,omitempty"`
}

func (x *DownloadStatus) Reset() {
	*x = DownloadStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_videoconverter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadStatus) ProtoMessage() {}

func (x *DownloadStatus) ProtoReflect() protoreflect.Message {
	mi := &file_videoconverter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadStatus.ProtoReflect.Descriptor instead.
func (*DownloadStatus) Descriptor() ([]byte, []int) {
	return file_videoconverter_proto_rawDescGZIP(), []int{9}
}

func (x *DownloadStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DownloadStatus) GetCode() UploadStatusCode {
	if x != nil {
		return x.Code
	}
	return UploadStatusCode_Unknown
}

var File_videoconverter_proto protoreflect.FileDescriptor

var file_videoconverter_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x13,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4a, 0x0a, 0x05, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x17, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x64, 0x22, 0x36, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x21, 0x0a, 0x0f, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x1f, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x46,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0x38, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64,
	0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f,
	0x6e, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02,
	0x32, 0xb0, 0x03, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x15,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1c, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x28, 0x01, 0x12, 0x67, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x1d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_videoconverter_proto_rawDescOnce sync.Once
	file_videoconverter_proto_rawDescData = file_videoconverter_proto_rawDesc
)

func file_videoconverter_proto_rawDescGZIP() []byte {
	file_videoconverter_proto_rawDescOnce.Do(func() {
		file_videoconverter_proto_rawDescData = protoimpl.X.CompressGZIP(file_videoconverter_proto_rawDescData)
	})
	return file_videoconverter_proto_rawDescData
}

var file_videoconverter_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_videoconverter_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_videoconverter_proto_goTypes = []interface{}{
	(UploadStatusCode)(0),            // 0: videoconverter.UploadStatusCode
	(ConversionStatusCode)(0),        // 1: videoconverter.ConversionStatusCode
	(*UploadTokenRequest)(nil),       // 2: videoconverter.UploadTokenRequest
	(*UploadTokenResponse)(nil),      // 3: videoconverter.UploadTokenResponse
	(*Chunk)(nil),                    // 4: videoconverter.Chunk
	(*ConversionStatusResponse)(nil), // 5: videoconverter.ConversionStatusResponse
	(*ConversionStatusRequest)(nil),  // 6: videoconverter.ConversionStatusRequest
	(*UploadStatus)(nil),             // 7: videoconverter.UploadStatus
	(*DownloadRequest)(nil),          // 8: videoconverter.DownloadRequest
	(*DeleteRequest)(nil),            // 9: videoconverter.DeleteRequest
	(*DeleteResponse)(nil),           // 10: videoconverter.DeleteResponse
	(*DownloadStatus)(nil),           // 11: videoconverter.DownloadStatus
}
var file_videoconverter_proto_depIdxs = []int32{
	1,  // 0: videoconverter.ConversionStatusResponse.Code:type_name -> videoconverter.ConversionStatusCode
	0,  // 1: videoconverter.DeleteResponse.code:type_name -> videoconverter.UploadStatusCode
	0,  // 2: videoconverter.DownloadStatus.Code:type_name -> videoconverter.UploadStatusCode
	2,  // 3: videoconverter.VideoConverter.RequestUploadToken:input_type -> videoconverter.UploadTokenRequest
	4,  // 4: videoconverter.VideoConverter.Upload:input_type -> videoconverter.Chunk
	6,  // 5: videoconverter.VideoConverter.ConversionStatus:input_type -> videoconverter.ConversionStatusRequest
	8,  // 6: videoconverter.VideoConverter.Download:input_type -> videoconverter.DownloadRequest
	9,  // 7: videoconverter.VideoConverter.Delete:input_type -> videoconverter.DeleteRequest
	3,  // 8: videoconverter.VideoConverter.RequestUploadToken:output_type -> videoconverter.UploadTokenResponse
	7,  // 9: videoconverter.VideoConverter.Upload:output_type -> videoconverter.UploadStatus
	5,  // 10: videoconverter.VideoConverter.ConversionStatus:output_type -> videoconverter.ConversionStatusResponse
	4,  // 11: videoconverter.VideoConverter.Download:output_type -> videoconverter.Chunk
	10, // 12: videoconverter.VideoConverter.Delete:output_type -> videoconverter.DeleteResponse
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_videoconverter_proto_init() }
func file_videoconverter_proto_init() {
	if File_videoconverter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_videoconverter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_videoconverter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_videoconverter_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Chunk_Token)(nil),
		(*Chunk_Content)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_videoconverter_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_videoconverter_proto_goTypes,
		DependencyIndexes: file_videoconverter_proto_depIdxs,
		EnumInfos:         file_videoconverter_proto_enumTypes,
		MessageInfos:      file_videoconverter_proto_msgTypes,
	}.Build()
	File_videoconverter_proto = out.File
	file_videoconverter_proto_rawDesc = nil
	file_videoconverter_proto_goTypes = nil
	file_videoconverter_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VideoConverterClient is the client API for VideoConverter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VideoConverterClient interface {
	RequestUploadToken(ctx context.Context, in *UploadTokenRequest, opts ...grpc.CallOption) (*UploadTokenResponse, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (VideoConverter_UploadClient, error)
	ConversionStatus(ctx context.Context, in *ConversionStatusRequest, opts ...grpc.CallOption) (*ConversionStatusResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (VideoConverter_DownloadClient, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type videoConverterClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoConverterClient(cc grpc.ClientConnInterface) VideoConverterClient {
	return &videoConverterClient{cc}
}

func (c *videoConverterClient) RequestUploadToken(ctx context.Context, in *UploadTokenRequest, opts ...grpc.CallOption) (*UploadTokenResponse, error) {
	out := new(UploadTokenResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.VideoConverter/RequestUploadToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoConverterClient) Upload(ctx context.Context, opts ...grpc.CallOption) (VideoConverter_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VideoConverter_serviceDesc.Streams[0], "/videoconverter.VideoConverter/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoConverterUploadClient{stream}
	return x, nil
}

type VideoConverter_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type videoConverterUploadClient struct {
	grpc.ClientStream
}

func (x *videoConverterUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoConverterUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoConverterClient) ConversionStatus(ctx context.Context, in *ConversionStatusRequest, opts ...grpc.CallOption) (*ConversionStatusResponse, error) {
	out := new(ConversionStatusResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.VideoConverter/ConversionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoConverterClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (VideoConverter_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VideoConverter_serviceDesc.Streams[1], "/videoconverter.VideoConverter/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoConverterDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VideoConverter_DownloadClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type videoConverterDownloadClient struct {
	grpc.ClientStream
}

func (x *videoConverterDownloadClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoConverterClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/videoconverter.VideoConverter/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoConverterServer is the server API for VideoConverter service.
type VideoConverterServer interface {
	RequestUploadToken(context.Context, *UploadTokenRequest) (*UploadTokenResponse, error)
	Upload(VideoConverter_UploadServer) error
	ConversionStatus(context.Context, *ConversionStatusRequest) (*ConversionStatusResponse, error)
	Download(*DownloadRequest, VideoConverter_DownloadServer) error
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

// UnimplementedVideoConverterServer can be embedded to have forward compatible implementations.
type UnimplementedVideoConverterServer struct {
}

func (*UnimplementedVideoConverterServer) RequestUploadToken(context.Context, *UploadTokenRequest) (*UploadTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestUploadToken not implemented")
}
func (*UnimplementedVideoConverterServer) Upload(VideoConverter_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedVideoConverterServer) ConversionStatus(context.Context, *ConversionStatusRequest) (*ConversionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversionStatus not implemented")
}
func (*UnimplementedVideoConverterServer) Download(*DownloadRequest, VideoConverter_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (*UnimplementedVideoConverterServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterVideoConverterServer(s *grpc.Server, srv VideoConverterServer) {
	s.RegisterService(&_VideoConverter_serviceDesc, srv)
}

func _VideoConverter_RequestUploadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoConverterServer).RequestUploadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.VideoConverter/RequestUploadToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoConverterServer).RequestUploadToken(ctx, req.(*UploadTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoConverter_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoConverterServer).Upload(&videoConverterUploadServer{stream})
}

type VideoConverter_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type videoConverterUploadServer struct {
	grpc.ServerStream
}

func (x *videoConverterUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoConverterUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VideoConverter_ConversionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoConverterServer).ConversionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.VideoConverter/ConversionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoConverterServer).ConversionStatus(ctx, req.(*ConversionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoConverter_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoConverterServer).Download(m, &videoConverterDownloadServer{stream})
}

type VideoConverter_DownloadServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type videoConverterDownloadServer struct {
	grpc.ServerStream
}

func (x *videoConverterDownloadServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _VideoConverter_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoConverterServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoconverter.VideoConverter/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoConverterServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VideoConverter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "videoconverter.VideoConverter",
	HandlerType: (*VideoConverterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestUploadToken",
			Handler:    _VideoConverter_RequestUploadToken_Handler,
		},
		{
			MethodName: "ConversionStatus",
			Handler:    _VideoConverter_ConversionStatus_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VideoConverter_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _VideoConverter_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _VideoConverter_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "videoconverter.proto",
}
