syntax = "proto3";

package videoconverter;

service VideoConverterLoadBalancer {
    rpc RequestUploadToken(UploadTokenRequest) returns (UploadTokenResponse) {}
    rpc Upload(stream Chunk) returns (UploadStatus) {}
    rpc StartConversion(ConversionRequest) returns (ConversionResponse) {}
    rpc ConversionStatus(ConversionStatusRequest) returns (ConversionStatusResponse) {}
    rpc Download(DownloadRequest) returns (stream Chunk) {}
    rpc Delete(DeleteRequest) returns (DeleteResponse) {}
}

service VideoConverterService {
    rpc StartConversion(ConversionRequest) returns (ConversionResponse) {}
    rpc IsAlive(IsAliveRequest) returns (IsAliveResponse) {}
    rpc AvailableForWork(AvailableForWorkRequest) returns (AvailableForWorkResponse) {}
    rpc ShutDown(ShutDownRequest) returns (ShutDownResponse) {}
}

service LifeGuard {
    rpc IsAlive(IsAliveRequest) returns (IsAliveResponse) {}
    rpc Election(ElectionRequest) returns (ElectionResponse) {}
    rpc Coordinator(CoordinatorRequest) returns (CoordinatorResponse) {}
    rpc RecreateRing(RecreateRingRequest) returns (RecreateRingResponse) {}
}

message RecreateRingRequest {
    int32 InitialSenderId = 1;
}

message RecreateRingResponse {}

message ElectionRequest{
    int32 highestProcessNumber = 1;
}

message ElectionResponse{}

message CoordinatorRequest{
    int32 highestProcessNumber = 1;
}

message CoordinatorResponse{}

message IsAliveRequest{}

message IsAliveResponse{}

message ShutDownRequest{}

message ShutDownResponse{}


message UploadTokenRequest{}

message UploadTokenResponse{
    string Token = 1;
}
message ConversionRequest{
    string Token = 1;
    string InputType = 2;
    string OutputType = 3;
}

message ConversionResponse{
    string Token = 1;
}

message Chunk {
    oneof RequestType {
        string Token = 1;
        bytes Content = 2;
    }
}

enum UploadStatusCode {
    Unknown = 0;
    Ok = 1;
    Interrupted = 2;
}

enum ConversionStatusCode {
    InProgress = 0;
    Done = 1;
    Failed = 2;
    NotStarted = 3;
}

message ConversionStatusResponse {
    ConversionStatusCode Code = 1;
    string DownloadId = 2;
}
message ConversionStatusRequest {
    string StatusId = 1;
}

message AvailableForWorkResponse {
    bool AvailableForWork = 1;
}
message AvailableForWorkRequest {

}

message UploadStatus {
    string RetrievalToken = 1;
}

message DownloadRequest {
    string Id = 1;
}

message DeleteRequest{
    string Id = 1;
}

message DeleteResponse{
    UploadStatusCode code = 1;
}

message DownloadStatus {
    string Message = 1;
    UploadStatusCode Code = 2;
}
